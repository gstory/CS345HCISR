PARSER_BEGIN(HCISR)

import java.io.*;
import java.util.*;

public class HCISR {

}

SKIP :
{

}

TOKEN:
{
   < S : ((" ") | ("	"))*>
   < EOL : "\n" | "\r" | "\n\r" | "\r\n" >
   < IDENT : ["A"-"Z"](["!"-"~"])* >
   < END : "." >
   < OF : "of" >
   < A : "a" >
   < NAMED : "named" >
   < TYPE : "type" >
   < ARCHTYPE : "archtype" >
   < EXTERNALTYPE : "externaltype" >
   < is_a_sub_type_of : "is a subtype of">
   < and_has : "and has">
   < and_an_instance : "and an instance">
   < understands_the_following_commands : "understands the following commands">
   < which_initially_equals : "which initially equals">
   < is_created_with_the_commands : "is created with the commands">
   < this_file_uses : "this file uses">
   < this_file_describes : "this file describes">
   < a_Class : "a class">
   < Functions : "functions" >
   < a_Program : "a program" >
   < define_a : "define a ">
   < SET : "set" >
   < TO : "to" >
   < IF : "if" > 
   < otherwise : "otherwise">
   < FOR_ALL  : "for all" >
   < DO: "do">
   < WHILE: "while" >
   < COMPLAIN_ABOUT : "complain about">
   < LABEL: "label">
   < GOTO : "go to">
   < NOTE : "note" >
   < RETURN : "return" >
   < and_in_the_event_of : "and in the event of">
   < NUMS : ["0"-"9"]+>
   < LP : "(" >
   < RP : ")" > 
   < CHARS : (["!"-"~"])+>
}

void NL() :
{}
{
   (<S>*<EOL>)+
}

void FTIDENT() :
{}
{
   <IDENT><S> (<OF><S> (<S><IDENT><S> (<S><LP><S> TIDENT()<S> <RP><S>)?)+)?
} 

void TIDENT() :
{}
{
   <IDENT> <S>(<OF><S> (<S><IDENT><S>|<S><IDENT><S> <OF><S> )+)?
}

void FILE() :
{}
{
   <S> <this_file_describes> <S> <a_Class> NL() Importbody() <END> NL() Class()
   |<S> <this_file_describes><S> <Functions> NL() Importbody() <END> NL() Functions()
   |<S> <this_file_describes><S><a_Program> NL() Importbody() <END> NL() Functions()

}

void Importbody() :
{}
{
   (Import())*
}

void Import() :
{}
{
   <this_file_uses> <S> (<CHARS>|<IDENT>) NL
}

void Class() :
{}
{
   <S> Header() <S> (Data())* <S> Methods() <S> Constructor() <S> <END> NL()
}

void Header() :
{}
{
   <S> (<TYPE>|<ARCHTYPE>|<EXTERNALTYPE>)<S> <TIDENT><S> <is_a_subtype_of><S> <TIDENT> NL()
}

void Data() :
{}
{
   <S> Dataheader() <S> Databody() <END> NL()
}

void Dataheader() :
{}
{
   <S> <and_has> NL()
}

void Databody():
{}
{
   <S> (<A> <S><TIDENT><S> <NAMED><S> <IDENT><S> (<which_initially_equals> <S>(<STRING>|<INT>|<FLOAT>|Function()|<BOOL>))? NL())*
}

void Methods() :
{}
{
    
