/* Generated By:JavaCC: Do not edit this line. HCISRTokenManager.java */
package hcisr;
import java.io.*;
import java.util.*;
import hcisr.ast.*;

/** Token Manager. */
public class HCISRTokenManager implements HCISRConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x780000000000L) != 0L)
         {
            jjmatchedKind = 50;
            return 13;
         }
         if ((active0 & 0x31010000283250L) != 0L)
            return 12;
         if ((active0 & 0x282ffffd7cda0L) != 0L)
         {
            jjmatchedKind = 54;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0x18043000020L) != 0L)
            return 12;
         if ((active0 & 0x780000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 13;
         }
         if ((active0 & 0x3827fbcd7ff80L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 12;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000L) != 0L)
            return 12;
         if ((active0 & 0x3827bbc56f780L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 12;
         }
         if ((active0 & 0x780000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
            return 13;
         }
         if ((active0 & 0x400010800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x780000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0x24804000100L) != 0L)
            return 12;
         if ((active0 & 0x3000020003000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80339856c680L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 12;
         }
         if ((active0 & 0x400010800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x288000080L) != 0L)
            return 12;
         if ((active0 & 0x800000060000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x3000020003000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400010800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x780000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x311050c600L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
            return 12;
         }
         return -1;
      case 5:
         if ((active0 & 0x3000000000L) != 0L)
            return 12;
         if ((active0 & 0x110504600L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return 12;
         }
         if ((active0 & 0x680000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 5;
            }
            return 13;
         }
         if ((active0 & 0x800000060000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000020003000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 13;
         return -1;
      case 6:
         if ((active0 & 0x680000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 12;
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000060000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000020003000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x110104600L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
            return 12;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x110104400L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 7;
            return 12;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
            return 12;
         if ((active0 & 0x800000060000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x480000000000L) != 0L)
            return 13;
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
            return 12;
         }
         if ((active0 & 0x10100000L) != 0L)
            return 12;
         if ((active0 & 0x800000060000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x100000400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 13;
         return -1;
      case 9:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
            return 12;
         }
         if ((active0 & 0x800000060000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x100000400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 10;
            return 12;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x100000400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x100000400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x100000400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x3000000002000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 29:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 30:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 31:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 32:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 33:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStartNfaWithStates_0(0, 52, 12);
      case 41:
         return jjStartNfaWithStates_0(0, 53, 12);
      case 46:
         return jjStartNfaWithStates_0(0, 4, 12);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x300000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 97:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x1010000283200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40400000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x28100000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8002010800L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000080L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000020L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2004005060100L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20080008000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x280000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800208000080L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000c00000L);
      case 102:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 12);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 12);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004080068000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000007000L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 12);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x400d20000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000200L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x10800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000100000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x400010800L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000007000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80068000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000080L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0xa3800000400L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000020003000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000800L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000118000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 12);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 12);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x880210004480L);
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400080080000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 12);
         break;
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8060000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000060800L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20082000L);
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 12);
         break;
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 12);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 34);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x3010014400L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000100200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 58:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 13);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00100001000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000410000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000100000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1001000002400L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x84800L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000402000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10400L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x110068000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000100000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 12);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 13);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 13);
         break;
      case 97:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(7, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x204000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000060400L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00100108000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000010000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000400L);
      case 58:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 13);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 12);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000070000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 12);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x14000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8400L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(9, 47);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000010000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000008000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0xa000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000040800L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 118:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x42000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L);
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(13, 17);
         break;
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(13, 32);
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(14, 13);
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(14, 11);
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L);
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x1c000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      case 98:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000004000L);
      case 113:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(18, 18);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000010000L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(20, 48);
         break;
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000004000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(21, 15);
         break;
      case 119:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa24_0(active0, 0x2000000000000L);
      case 109:
         return jjMoveStringLiteralDfa24_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa25_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa26_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa26_0(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa27_0(active0, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa27_0(active0, 0x10000L);
      case 107:
         return jjMoveStringLiteralDfa27_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0x4000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(27, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa29_0(active0, 0x2000000000000L);
      case 109:
         return jjMoveStringLiteralDfa29_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa30_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa30_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa31_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa31_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
static private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa32_0(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa32_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
static private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa33_0(active0, 0x2000000000000L);
      case 100:
         return jjMoveStringLiteralDfa33_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
static private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa34_0(active0, 0x2000000000000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(33, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
static private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(34, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffe00000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(12);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(11);
                  }
                  break;
               case 13:
                  if ((0xfffffffe00000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(12);
                  }
                  if ((0xfffffffe00000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(10);
                  }
                  break;
               case 1:
                  if (curChar == 58)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffff00000200L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(2);
                  break;
               case 10:
                  if ((0xfffffffe00000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0xfffffffe00000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(12);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(10);
                  }
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 13:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(12);
                  }
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(10);
                  }
                  break;
               case 2:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\56", "\157\146", "\141", "\156\141\155\145\144", 
"\164\171\160\145", "\141\162\143\150\164\171\160\145", 
"\145\170\164\145\162\156\141\154\40\164\171\160\145", "\151\163\40\141\40\163\165\142\164\171\160\145\40\157\146", 
"\141\156\144\40\150\141\163", "\141\156\144\40\141\156\40\151\156\163\164\141\156\143\145", 
"\165\156\144\145\162\163\164\141\156\144\163\40\164\150\145\40\146\157\154\154\157\167\151\156\147\40\143\157\155\155\141\156\144\163", 
"\167\150\151\143\150\40\151\156\151\164\151\141\154\154\171\40\145\161\165\141\154\163", 
"\151\163\40\143\162\145\141\164\145\144\40\167\151\164\150\40\164\150\145\40\143\157\155\155\141\156\144\163", "\164\150\151\163\40\146\151\154\145\40\165\163\145\163", 
"\164\150\151\163\40\146\151\154\145\40\144\145\163\143\162\151\142\145\163", "\141\40\143\154\141\163\163", "\146\165\156\143\164\151\157\156\163", 
"\141\40\160\162\157\147\162\141\155", "\144\145\146\151\156\145\40\141", "\163\145\164", "\164\157", "\151\146", 
"\164\162\165\145", "\146\141\154\163\145", "\157\164\150\145\162\167\151\163\145", 
"\146\157\162\40\141\154\154", "\144\157", "\167\150\151\154\145", 
"\143\157\155\160\154\141\151\156\40\141\142\157\165\164", "\154\141\142\145\154", "\147\157\40\164\157", "\156\157\164\145", 
"\162\145\164\165\162\156\163", "\162\145\164\165\162\156", "\164\150\145\156", "\151\156", "\141\163", 
"\167\151\164\150", null, "\111\156\164\145\147\145\162\72", "\106\154\157\141\164\72", 
"\106\165\156\143\164\151\157\156\72", "\102\157\157\154\145\141\156\72", "\155\141\153\145\40\141\40\156\145\167", 
"\141\156\144\40\151\156\40\164\150\145\40\145\166\145\156\164\40\157\146\40\141", 
"\164\150\145\40\146\157\154\154\157\167\151\156\147\40\146\165\156\143\164\151\157\156\163\40\155\141\153\145\40\165\163\145\40\157\146", null, null, "\50", "\51", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffffff9L, 
};
static final long[] jjtoSkip = {
   0x6L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[13];
static private final int[] jjstateSet = new int[26];
static protected char curChar;
/** Constructor. */
public HCISRTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public HCISRTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 13; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
